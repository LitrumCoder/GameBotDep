using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;

namespace TelegramGameBot.Services.Games
{
    public class CoinGame : BaseGame
    {
        private readonly Dictionary<string, (string name, string emoji)> _sides = new()
        {
            { "heads", ("–û—Ä—ë–ª", "ü¶Ö") },
            { "tails", ("–†–µ—à–∫–∞", "üëë") }
        };

        private readonly Dictionary<long, (string Side, int Amount)> _pendingBets;

        public CoinGame(ITelegramBotClient bot, UserService userService)
            : base(bot, userService)
        {
            _pendingBets = new Dictionary<long, (string, int)>();
        }

        public override async Task ShowRules(long chatId)
        {
            var text = "ü™ô –ú–æ–Ω–µ—Ç–∫–∞\n\n" +
                      "–ü—Ä–∞–≤–∏–ª–∞:\n" +
                      "1. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É\n" +
                      "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã\n" +
                      "3. –ü–æ–¥–±—Ä–æ—Å—å—Ç–µ –º–æ–Ω–µ—Ç—É\n\n" +
                      "–í—ã–∏–≥—Ä—ã—à:\n" +
                      "ü¶Ö –û—Ä—ë–ª - x2.0\n" +
                      "üëë –†–µ—à–∫–∞ - x2.0";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("ü™ô –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", "coin_bet"),
                    InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "games_menu")
                }
            });

            await _bot.SendTextMessageAsync(chatId, text, replyMarkup: keyboard);
        }

        public override async Task HandleCommand(long chatId, long userId, string command)
        {
            switch (command)
            {
                case "coin_bet":
                    await ShowBetMenu(chatId, "coin_game");
                    break;

                case "coin_heads":
                case "coin_tails":
                    if (_pendingBets.TryGetValue(userId, out var bet) && string.IsNullOrEmpty(bet.Side))
                    {
                        await ProcessSideSelection(chatId, userId, command.Replace("coin_", ""));
                    }
                    else
                    {
                        await _bot.SendTextMessageAsync(
                            chatId,
                            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
                        );
                    }
                    break;

                case "coin_flip":
                    await FlipCoin(chatId, userId);
                    break;
            }
        }

        public override async Task ProcessBet(long chatId, long userId, int amount)
        {
            var user = _userService.GetOrCreateUser(userId);
            
            if (user.Balance < amount)
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    $"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user.Balance} –º–æ–Ω–µ—Ç"
                );
                return;
            }

            _userService.UpdateBalance(userId, -amount);
            _pendingBets[userId] = ("", amount);

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("ü¶Ö –û—Ä—ë–ª", "coin_heads"),
                    InlineKeyboardButton.WithCallbackData("üëë –†–µ—à–∫–∞", "coin_tails")
                }
            });

            await _bot.SendTextMessageAsync(
                chatId,
                $"–°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã:",
                replyMarkup: keyboard
            );
        }

        private async Task ProcessSideSelection(long chatId, long userId, string side)
        {
            if (!_pendingBets.TryGetValue(userId, out var bet))
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
                );
                return;
            }

            _pendingBets[userId] = (side, bet.Amount);

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("ü™ô –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É", "coin_flip")
                }
            });

            await _bot.SendTextMessageAsync(
                chatId,
                $"–°—Ç–∞–≤–∫–∞: {bet.Amount} –º–æ–Ω–µ—Ç\n" +
                $"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞: {_sides[side].emoji} {_sides[side].name}\n\n" +
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É!",
                replyMarkup: keyboard
            );
        }

        private async Task FlipCoin(long chatId, long userId)
        {
            if (!_pendingBets.TryGetValue(userId, out var bet))
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
                );
                return;
            }

            if (string.IsNullOrEmpty(bet.Side))
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã!"
                );
                return;
            }

            var result = _random.Next(2) == 0 ? "heads" : "tails";
            var isWin = result == bet.Side;
            var winAmount = isWin ? bet.Amount * 2 : 0;

            if (winAmount > 0)
            {
                _userService.UpdateBalance(userId, winAmount);
            }

            _pendingBets.Remove(userId);

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("ü™ô –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "coin_bet"),
                    InlineKeyboardButton.WithCallbackData("üè† –í –º–µ–Ω—é", "games_menu")
                }
            });

            var resultText = isWin
                ? $"üéâ –ü–æ–±–µ–¥–∞!\n" +
                  $"–í—ã–ø–∞–ª–æ: {_sides[result].emoji} {_sides[result].name}\n" +
                  $"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x2.0\n" +
                  $"–í—ã–∏–≥—Ä—ã—à: {winAmount} –º–æ–Ω–µ—Ç"
                : $"üò¢ –ü—Ä–æ–∏–≥—Ä—ã—à\n" +
                  $"–í—ã–ø–∞–ª–æ: {_sides[result].emoji} {_sides[result].name}\n" +
                  $"–ü—Ä–æ–∏–≥—Ä—ã—à: {bet.Amount} –º–æ–Ω–µ—Ç";

            await _bot.SendTextMessageAsync(
                chatId,
                resultText,
                replyMarkup: keyboard
            );

            _userService.AddGameHistory(
                userId,
                "–ú–æ–Ω–µ—Ç–∫–∞",
                bet.Amount,
                isWin,
                $"–í—ã–ø–∞–ª–æ: {_sides[result].name}"
            );
        }
    }
} 