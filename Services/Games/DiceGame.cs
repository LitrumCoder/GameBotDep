using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;
using System.Collections.Concurrent;

namespace TelegramGameBot.Services.Games
{
    public class DiceGame : BaseGame
    {
        private readonly ConcurrentDictionary<long, (int bet, string? betType, int? selectedNumber)> _games = new();
        private readonly Dictionary<string, (string name, string emoji, double multiplier)> _betTypes = new()
        {
            { "even", ("–ß—ë—Ç", "2Ô∏è‚É£", 2.0) },
            { "odd", ("–ù–µ—á–µ—Ç", "1Ô∏è‚É£", 2.0) },
            { "high", ("–ë–æ–ª—å—à–µ 3", "‚¨ÜÔ∏è", 2.0) },
            { "low", ("–ú–µ–Ω—å—à–µ 4", "‚¨áÔ∏è", 2.0) },
            { "exact", ("–¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ", "üéØ", 6.0) }
        };

        private readonly Dictionary<long, (string BetType, int Amount)> _pendingBets;

        public DiceGame(ITelegramBotClient bot, UserService userService)
            : base(bot, userService)
        {
            _pendingBets = new Dictionary<long, (string, int)>();
        }

        public override async Task ShowRules(long chatId)
        {
            var text = "üé≤ –ö–æ—Å—Ç–∏\n\n" +
                      "–ü—Ä–∞–≤–∏–ª–∞:\n" +
                      "1. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É\n" +
                      "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏\n" +
                      "3. –ë—Ä–æ—Å—å—Ç–µ –∫–æ—Å—Ç–∏\n\n" +
                      "–¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫:\n" +
                      "2Ô∏è‚É£ –ß—ë—Ç (x2.0) - –≤—ã–ø–∞–¥–µ—Ç —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n" +
                      "1Ô∏è‚É£ –ù–µ—á–µ—Ç (x2.0) - –≤—ã–ø–∞–¥–µ—Ç –Ω–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n" +
                      "‚¨ÜÔ∏è –ë–æ–ª—å—à–µ 3 (x2.0) - –≤—ã–ø–∞–¥–µ—Ç 4, 5 –∏–ª–∏ 6\n" +
                      "‚¨áÔ∏è –ú–µ–Ω—å—à–µ 4 (x2.0) - –≤—ã–ø–∞–¥–µ—Ç 1, 2 –∏–ª–∏ 3\n" +
                      "üéØ –¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ (x6.0) - —É–≥–∞–¥–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üé≤ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", "dice_bet"),
                    InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "games_menu")
                }
            });

            await _bot.SendTextMessageAsync(chatId, text, replyMarkup: keyboard);
        }

        public override async Task HandleCommand(long chatId, long userId, string command)
        {
            switch (command)
            {
                case "dice_bet":
                    await ShowBetMenu(chatId, "dice_game");
                    break;

                case var c when c.StartsWith("dice_type_"):
                    if (_pendingBets.TryGetValue(userId, out var bet))
                    {
                        var betType = command.Replace("dice_type_", "");
                        await ProcessBetType(chatId, userId, betType, bet.Amount);
                    }
                    else
                    {
                        await _bot.SendTextMessageAsync(
                            chatId,
                            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
                        );
                    }
                    break;

                case "dice_roll":
                    await RollDice(chatId, userId);
                    break;
            }
        }

        public override async Task ProcessBet(long chatId, long userId, int amount)
        {
            var user = _userService.GetOrCreateUser(userId);
            
            if (user.Balance < amount)
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    $"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user.Balance} –º–æ–Ω–µ—Ç"
                );
                return;
            }

            _pendingBets[userId] = ("", amount);

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("2Ô∏è‚É£ –ß—ë—Ç", "dice_type_even"),
                    InlineKeyboardButton.WithCallbackData("1Ô∏è‚É£ –ù–µ—á–µ—Ç", "dice_type_odd")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚¨ÜÔ∏è –ë–æ–ª—å—à–µ 3", "dice_type_high"),
                    InlineKeyboardButton.WithCallbackData("‚¨áÔ∏è –ú–µ–Ω—å—à–µ 4", "dice_type_low")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("1Ô∏è‚É£", "dice_type_1"),
                    InlineKeyboardButton.WithCallbackData("2Ô∏è‚É£", "dice_type_2"),
                    InlineKeyboardButton.WithCallbackData("3Ô∏è‚É£", "dice_type_3")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("4Ô∏è‚É£", "dice_type_4"),
                    InlineKeyboardButton.WithCallbackData("5Ô∏è‚É£", "dice_type_5"),
                    InlineKeyboardButton.WithCallbackData("6Ô∏è‚É£", "dice_type_6")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üîô –û—Ç–º–µ–Ω–∞", "dice_game")
                }
            });

            await _bot.SendTextMessageAsync(
                chatId,
                $"–°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
                replyMarkup: keyboard
            );
        }

        private async Task ProcessBetType(long chatId, long userId, string betType, int amount)
        {
            var user = _userService.GetOrCreateUser(userId);
            _userService.UpdateBalance(userId, -amount);
            _pendingBets[userId] = (betType, amount);

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏", "dice_roll")
                }
            });

            string betDescription = betType switch
            {
                "even" => "–ß—ë—Ç (x2.0)",
                "odd" => "–ù–µ—á–µ—Ç (x2.0)",
                "high" => "–ë–æ–ª—å—à–µ 3 (x2.0)",
                "low" => "–ú–µ–Ω—å—à–µ 4 (x2.0)",
                _ when betType.Length == 1 => $"–¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ {betType} (x6.0)",
                _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞"
            };

            await _bot.SendTextMessageAsync(
                chatId,
                $"–°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç\n" +
                $"–¢–∏–ø: {betDescription}\n\n" +
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏!",
                replyMarkup: keyboard
            );
        }

        private async Task RollDice(long chatId, long userId)
        {
            if (!_pendingBets.TryGetValue(userId, out var bet))
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
                );
                return;
            }

            var (betType, amount) = bet;
            var roll = _random.Next(1, 7);
            var win = false;
            var multiplier = 1.0;

            switch (betType)
            {
                case "even":
                    win = roll % 2 == 0;
                    multiplier = 2.0;
                    break;
                case "odd":
                    win = roll % 2 != 0;
                    multiplier = 2.0;
                    break;
                case "high":
                    win = roll > 3;
                    multiplier = 2.0;
                    break;
                case "low":
                    win = roll < 4;
                    multiplier = 2.0;
                    break;
                default:
                    if (int.TryParse(betType, out int exactNumber))
                    {
                        win = roll == exactNumber;
                        multiplier = 6.0;
                    }
                    break;
            }

            var winAmount = win ? (int)(amount * multiplier) : 0;
            if (win)
            {
                _userService.UpdateBalance(userId, winAmount);
            }

            _pendingBets.Remove(userId);

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üé≤ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "dice_bet"),
                    InlineKeyboardButton.WithCallbackData("üè† –í –º–µ–Ω—é", "games_menu")
                }
            });

            var diceEmoji = roll switch
            {
                1 => "1Ô∏è‚É£",
                2 => "2Ô∏è‚É£",
                3 => "3Ô∏è‚É£",
                4 => "4Ô∏è‚É£",
                5 => "5Ô∏è‚É£",
                6 => "6Ô∏è‚É£",
                _ => "üé≤"
            };

            var resultText = win
                ? $"üéâ –ü–æ–±–µ–¥–∞!\n–í—ã–ø–∞–ª–æ: {diceEmoji}\n–í—ã–∏–≥—Ä—ã—à: {winAmount} –º–æ–Ω–µ—Ç"
                : $"üò¢ –ü—Ä–æ–∏–≥—Ä—ã—à\n–í—ã–ø–∞–ª–æ: {diceEmoji}\n–ü—Ä–æ–∏–≥—Ä—ã—à: {amount} –º–æ–Ω–µ—Ç";

            await _bot.SendTextMessageAsync(
                chatId,
                resultText,
                replyMarkup: keyboard
            );

            _userService.AddGameHistory(
                userId,
                "–ö–æ—Å—Ç–∏",
                amount,
                win,
                $"–í—ã–ø–∞–ª–æ: {roll}, —Å—Ç–∞–≤–∫–∞: {betType}"
            );
        }
    }
} 