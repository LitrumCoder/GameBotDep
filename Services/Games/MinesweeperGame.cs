using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;
using System.Collections.Concurrent;

namespace TelegramGameBot.Services.Games
{
    public class MinesweeperGameState
    {
        public int GridSize { get; set; }
        public int MinesCount { get; set; }
        public bool[,] Mines { get; set; }
        public bool[,] OpenedCells { get; set; }
        public int Bet { get; set; }
        public double Multiplier { get; set; }
        public bool IsGameOver { get; set; }
        public bool IsFirstMove { get; set; }
        public int OpenedSafeCells { get; set; }
        public int TotalSafeCells { get; set; }

        public MinesweeperGameState(int size, int mines, int bet)
        {
            GridSize = size;
            MinesCount = mines;
            Mines = new bool[size, size];
            OpenedCells = new bool[size, size];
            Bet = bet;
            Multiplier = 1.0;
            IsGameOver = false;
            IsFirstMove = true;
            OpenedSafeCells = 0;
            TotalSafeCells = size * size - mines;
        }

        public void PlaceMines(int firstX, int firstY)
        {
            var random = new Random();
            var positions = new List<(int x, int y)>();

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ –∏ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ
            for (int i = 0; i < GridSize; i++)
            {
                for (int j = 0; j < GridSize; j++)
                {
                    if (Math.Abs(i - firstX) > 1 || Math.Abs(j - firstY) > 1)
                    {
                        positions.Add((i, j));
                    }
                }
            }

            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            for (int i = positions.Count - 1; i > 0; i--)
            {
                int j = random.Next(i + 1);
                var temp = positions[i];
                positions[i] = positions[j];
                positions[j] = temp;
            }

            // –†–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã
            for (int i = 0; i < Math.Min(MinesCount, positions.Count); i++)
            {
                var (x, y) = positions[i];
                Mines[x, y] = true;
            }
        }

        public void UpdateMultiplier()
        {
            double baseMultiplier = (double)(GridSize * GridSize) / (MinesCount * 2);
            double progressMultiplier = (double)OpenedSafeCells / (TotalSafeCells * 1.5);
            double riskFactor = Math.Pow(1.05, OpenedSafeCells);
            
            Multiplier = Math.Round(baseMultiplier * (1 + progressMultiplier) * riskFactor, 2);
        }
    }

    public class MinesweeperGame : BaseGame
    {
        private readonly ConcurrentDictionary<long, MinesweeperGameState> _games;

        public MinesweeperGame(ITelegramBotClient bot, UserService userService) 
            : base(bot, userService)
        {
            _games = new ConcurrentDictionary<long, MinesweeperGameState>();
        }

        public override async Task HandleCommand(long chatId, long userId, string command)
        {
            switch (command)
            {
                case "minesweeper":
                    await ShowRules(chatId);
                    break;
                case var c when c.StartsWith("minesweeper_size_"):
                    await HandleSizeSelection(chatId, userId, command);
                    break;
                case var c when c.StartsWith("minesweeper_mines_"):
                    await HandleMinesSelection(chatId, userId, command);
                    break;
                case var c when c.StartsWith("minesweeper_cell_"):
                    await HandleCellClick(chatId, userId, command);
                    break;
                case "minesweeper_collect":
                    await HandleCollect(chatId, userId);
                    break;
            }
        }

        public override async Task ShowRules(long chatId)
        {
            var text = "üí£ –°–∞–ø—ë—Ä\n\n" +
                      "–ü—Ä–∞–≤–∏–ª–∞:\n" +
                      "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è\n" +
                      "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω\n" +
                      "3. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É\n" +
                      "4. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏ –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏\n" +
                      "5. –ï—Å–ª–∏ –ø–æ–ø–∞–¥—ë—Ç–µ –Ω–∞ –º–∏–Ω—É - –ø—Ä–æ–∏–≥—Ä—ã—à\n" +
                      "6. –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n" +
                      "–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞—Å—Ç—ë—Ç —Å –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–ª–µ—Ç–∫–æ–π!";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("5x5 (–õ–µ–≥–∫–æ)", "minesweeper_size_5"),
                    InlineKeyboardButton.WithCallbackData("7x7 (–°—Ä–µ–¥–Ω–µ)", "minesweeper_size_7")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("10x10 (–°–ª–æ–∂–Ω–æ)", "minesweeper_size_10")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "games_menu")
                }
            });

            await _bot.SendTextMessageAsync(chatId, text, replyMarkup: keyboard);
        }

        private async Task HandleSizeSelection(long chatId, long userId, string command)
        {
            var size = int.Parse(command.Split('_').Last());
            var mineOptions = size switch
            {
                5 => new[] { 3, 5, 7 },
                7 => new[] { 5, 8, 12 },
                10 => new[] { 8, 12, 16 },
                _ => new[] { 3, 5, 7 }
            };

            var buttons = mineOptions.Select(count =>
                InlineKeyboardButton.WithCallbackData(
                    $"{count} –º–∏–Ω",
                    $"minesweeper_mines_{size}_{count}"
                )).ToArray();

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                buttons,
                new[] { InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "minesweeper") }
            });

            await _bot.SendTextMessageAsync(
                chatId,
                $"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è {size}x{size}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω:",
                replyMarkup: keyboard
            );
        }

        private async Task HandleMinesSelection(long chatId, long userId, string command)
        {
            var parts = command.Split('_');
            var size = int.Parse(parts[2]);
            var mines = int.Parse(parts[3]);

            var user = _userService.GetOrCreateUser(userId);
            user.CurrentGame = $"minesweeper_{size}x{size}_{mines}";

            await ShowBetMenu(chatId, "minesweeper");
        }

        public override async Task ProcessBet(long chatId, long userId, int amount)
        {
            var user = _userService.GetOrCreateUser(userId);
            
            if (user.Balance < amount)
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    $"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user.Balance} –º–æ–Ω–µ—Ç"
                );
                return;
            }

            if (string.IsNullOrEmpty(user.CurrentGame) || !user.CurrentGame.StartsWith("minesweeper_"))
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω"
                );
                return;
            }

            var parts = user.CurrentGame.Split('_')[1].Split('x');
            var size = int.Parse(parts[0]);
            var mines = int.Parse(user.CurrentGame.Split('_')[2]);

            var game = new MinesweeperGameState(size, mines, amount);
            
            _games.TryRemove(userId, out _);
            
            if (!_games.TryAdd(userId, game))
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                );
                return;
            }

            _userService.UpdateBalance(userId, -amount);
            await ShowGameField(chatId, game);
        }

        private async Task HandleCellClick(long chatId, long userId, string command)
        {
            if (!_games.TryGetValue(userId, out var game))
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É",
                    replyMarkup: new InlineKeyboardMarkup(
                        InlineKeyboardButton.WithCallbackData("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", "minesweeper")
                    )
                );
                return;
            }

            if (game.IsGameOver)
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é"
                );
                return;
            }

            var parts = command.Split('_');
            var x = int.Parse(parts[2]);
            var y = int.Parse(parts[3]);

            if (game.OpenedCells[x, y])
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ö†Ô∏è –≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!"
                );
                return;
            }

            if (game.IsFirstMove)
            {
                game.PlaceMines(x, y);
                game.IsFirstMove = false;
            }

            game.OpenedCells[x, y] = true;

            if (game.Mines[x, y])
            {
                await HandleGameOver(chatId, userId, game, x, y);
                return;
            }

            game.OpenedSafeCells++;
            game.UpdateMultiplier();

            await ShowGameField(chatId, game, true);
        }

        private async Task HandleGameOver(long chatId, long userId, MinesweeperGameState game, int hitX, int hitY)
        {
            game.IsGameOver = true;
            _games.TryRemove(userId, out _);

            var buttons = new List<List<InlineKeyboardButton>>();
            for (int i = 0; i < game.GridSize; i++)
            {
                var row = new List<InlineKeyboardButton>();
                for (int j = 0; j < game.GridSize; j++)
                {
                    string symbol;
                    if (i == hitX && j == hitY)
                        symbol = "üí•";
                    else if (game.OpenedCells[i, j])
                        symbol = "‚úÖ";
                    else if (game.Mines[i, j])
                        symbol = "üí£";
                    else
                        symbol = "‚¨ú";

                    row.Add(InlineKeyboardButton.WithCallbackData(symbol, $"minesweeper_cell_{i}_{j}"));
                }
                buttons.Add(row);
            }

            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "minesweeper"),
                InlineKeyboardButton.WithCallbackData("üè† –í –º–µ–Ω—é", "games_menu")
            });

            await _bot.SendTextMessageAsync(
                chatId,
                $"üí£ –ë–£–ú! –í—ã –ø–æ–¥–æ—Ä–≤–∞–ª–∏—Å—å –Ω–∞ –º–∏–Ω–µ!\n" +
                $"–ü—Ä–æ–∏–≥—Ä—ã—à: {game.Bet} –º–æ–Ω–µ—Ç\n" +
                $"–û—Ç–∫—Ä—ã—Ç–æ –∫–ª–µ—Ç–æ–∫: {game.OpenedSafeCells}\n" +
                $"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{game.Multiplier:F2}",
                replyMarkup: new InlineKeyboardMarkup(buttons)
            );

            _userService.AddGameHistory(
                userId,
                "–°–∞–ø—ë—Ä",
                game.Bet,
                false,
                $"–ü–æ–¥—Ä—ã–≤ –Ω–∞ –º–∏–Ω–µ. –û—Ç–∫—Ä—ã—Ç–æ {game.OpenedSafeCells} –∫–ª–µ—Ç–æ–∫"
            );
        }

        private async Task HandleCollect(long chatId, long userId)
        {
            if (!_games.TryGetValue(userId, out var game))
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                );
                return;
            }

            if (_games.TryRemove(userId, out game))
            {
                var winAmount = (int)(game.Bet * game.Multiplier);
                _userService.UpdateBalance(userId, winAmount);

                await _bot.SendTextMessageAsync(
                    chatId,
                    $"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–±—Ä–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à!\n" +
                    $"–°—Ç–∞–≤–∫–∞: {game.Bet}\n" +
                    $"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{game.Multiplier:F2}\n" +
                    $"–í—ã–∏–≥—Ä—ã—à: {winAmount} –º–æ–Ω–µ—Ç\n" +
                    $"–û—Ç–∫—Ä—ã—Ç–æ –∫–ª–µ—Ç–æ–∫: {game.OpenedSafeCells}",
                    replyMarkup: new InlineKeyboardMarkup(new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "minesweeper"),
                            InlineKeyboardButton.WithCallbackData("üè† –í –º–µ–Ω—é", "games_menu")
                        }
                    })
                );

                _userService.AddGameHistory(
                    userId,
                    "–°–∞–ø—ë—Ä",
                    game.Bet,
                    true,
                    $"–í—ã–∏–≥—Ä—ã—à x{game.Multiplier:F2}. –û—Ç–∫—Ä—ã—Ç–æ {game.OpenedSafeCells} –∫–ª–µ—Ç–æ–∫"
                );
            }
        }

        private async Task ShowGameField(long chatId, MinesweeperGameState game, bool showStats = false)
        {
            var buttons = new List<List<InlineKeyboardButton>>();
            
            for (int i = 0; i < game.GridSize; i++)
            {
                var row = new List<InlineKeyboardButton>();
                for (int j = 0; j < game.GridSize; j++)
                {
                    string symbol = game.OpenedCells[i, j] ? "‚úÖ" : "‚¨ú";
                    row.Add(InlineKeyboardButton.WithCallbackData(symbol, $"minesweeper_cell_{i}_{j}"));
                }
                buttons.Add(row);
            }

            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData(
                    $"üí∞ {game.Bet} | üìà x{game.Multiplier:F2} | ‚úÖ {game.OpenedSafeCells}/{game.TotalSafeCells}",
                    "info_mines"
                )
            });

            buttons.Add(new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData("üí∞ –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à", "minesweeper_collect"),
                InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "minesweeper")
            });

            var text = showStats
                ? $"üíé –ö–ª–µ—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞!\n" +
                  $"–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: x{game.Multiplier:F2}\n" +
                  $"–û—Ç–∫—Ä—ã—Ç–æ –∫–ª–µ—Ç–æ–∫: {game.OpenedSafeCells}\n" +
                  $"–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {(int)(game.Bet * game.Multiplier)} –º–æ–Ω–µ—Ç"
                : "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É:";

            try
            {
                await _bot.EditMessageTextAsync(
                    chatId: chatId,
                    messageId: _bot.LoadLastMessageId(),
                    text: text,
                    replyMarkup: new InlineKeyboardMarkup(buttons)
                );
            }
            catch
            {
                await _bot.SendTextMessageAsync(
                    chatId: chatId,
                    text: text,
                    replyMarkup: new InlineKeyboardMarkup(buttons)
                );
            }
        }
    }
} 