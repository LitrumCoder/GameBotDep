using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;
using System.Collections.Concurrent;

namespace TelegramGameBot.Services.Games
{
    public class SlotsGameState
    {
        public int CurrentBet { get; set; }
        public bool IsSpinning { get; set; }
        public DateTime LastSpinTime { get; set; }
        public string[] CurrentSymbols { get; set; }

        public SlotsGameState(int bet)
        {
            CurrentBet = bet;
            IsSpinning = false;
            LastSpinTime = DateTime.Now;
            CurrentSymbols = new string[3];
        }
    }

    public class SlotsGame : BaseGame
    {
        private readonly Dictionary<string, (string name, string emoji, double multiplier)> _symbols = new()
        {
            { "seven", ("–°–µ–º–µ—Ä–∫–∞", "7Ô∏è‚É£", 10.0) },
            { "diamond", ("–ë—Ä–∏–ª–ª–∏–∞–Ω—Ç", "üíé", 5.0) },
            { "grape", ("–í–∏–Ω–æ–≥—Ä–∞–¥", "üçá", 4.0) },
            { "orange", ("–ê–ø–µ–ª—å—Å–∏–Ω", "üçä", 3.0) },
            { "lemon", ("–õ–∏–º–æ–Ω", "üçã", 2.5) },
            { "cherry", ("–í–∏—à–Ω—è", "üçí", 2.0) }
        };

        private readonly Dictionary<long, int> _pendingBets;

        public SlotsGame(ITelegramBotClient bot, UserService userService)
            : base(bot, userService)
        {
            _pendingBets = new Dictionary<long, int>();
        }

        public override async Task ShowRules(long chatId)
        {
            var text = "üé∞ –°–ª–æ—Ç—ã\n\n" +
                      "–ü—Ä–∞–≤–∏–ª–∞:\n" +
                      "1. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É\n" +
                      "2. –ö—Ä—É—Ç–∏—Ç–µ —Å–ª–æ—Ç—ã\n" +
                      "3. –°–æ–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞\n\n" +
                      "–ú–Ω–æ–∂–∏—Ç–µ–ª–∏:\n" +
                      "7Ô∏è‚É£ –°–µ–º–µ—Ä–∫–∞ - x10.0\n" +
                      "üíé –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç - x5.0\n" +
                      "üçá –í–∏–Ω–æ–≥—Ä–∞–¥ - x4.0\n" +
                      "üçä –ê–ø–µ–ª—å—Å–∏–Ω - x3.0\n" +
                      "üçã –õ–∏–º–æ–Ω - x2.5\n" +
                      "üçí –í–∏—à–Ω—è - x2.0";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", "slots_bet"),
                    InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "games_menu")
                }
            });

            await _bot.SendTextMessageAsync(chatId, text, replyMarkup: keyboard);
        }

        public override async Task HandleCommand(long chatId, long userId, string command)
        {
            switch (command)
            {
                case "slots_bet":
                    await ShowBetMenu(chatId, "slots_game");
                    break;

                case "slots_spin":
                    await SpinSlots(chatId, userId);
                    break;
            }
        }

        public override async Task ProcessBet(long chatId, long userId, int amount)
        {
            var user = _userService.GetOrCreateUser(userId);
            
            if (user.Balance < amount)
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    $"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user.Balance} –º–æ–Ω–µ—Ç"
                );
                return;
            }

            _userService.UpdateBalance(userId, -amount);
            _pendingBets[userId] = amount;

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üé∞ –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã", "slots_spin")
                }
            });

            await _bot.SendTextMessageAsync(
                chatId,
                $"–°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã!",
                replyMarkup: keyboard
            );
        }

        private async Task SpinSlots(long chatId, long userId)
        {
            if (!_pendingBets.TryGetValue(userId, out var bet))
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
                );
                return;
            }

            var symbols = _symbols.ToList();
            var result = new (string key, (string name, string emoji, double multiplier) value)[3];
            
            for (int i = 0; i < 3; i++)
            {
                var randomIndex = _random.Next(symbols.Count);
                var symbol = symbols[randomIndex];
                result[i] = (symbol.Key, symbol.Value);
            }

            var isWin = result[0].value.emoji == result[1].value.emoji && 
                       result[1].value.emoji == result[2].value.emoji;

            var winAmount = isWin ? (int)(bet * result[0].value.multiplier) : 0;

            if (winAmount > 0)
            {
                _userService.UpdateBalance(userId, winAmount);
            }

            _pendingBets.Remove(userId);

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "slots_bet"),
                    InlineKeyboardButton.WithCallbackData("üè† –í –º–µ–Ω—é", "games_menu")
                }
            });

            var slotsLine = $"{result[0].value.emoji} {result[1].value.emoji} {result[2].value.emoji}";
            var resultText = isWin
                ? $"üéâ –ü–æ–±–µ–¥–∞!\n" +
                  $"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {slotsLine}\n" +
                  $"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{result[0].value.multiplier}\n" +
                  $"–í—ã–∏–≥—Ä—ã—à: {winAmount} –º–æ–Ω–µ—Ç"
                : $"üò¢ –ü—Ä–æ–∏–≥—Ä—ã—à\n" +
                  $"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {slotsLine}\n" +
                  $"–ü—Ä–æ–∏–≥—Ä—ã—à: {bet} –º–æ–Ω–µ—Ç";

            await _bot.SendTextMessageAsync(
                chatId,
                resultText,
                replyMarkup: keyboard
            );

            _userService.AddGameHistory(
                userId,
                "–°–ª–æ—Ç—ã",
                bet,
                isWin,
                $"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {slotsLine}"
            );
        }
    }
} 