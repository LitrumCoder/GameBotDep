using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;
using System.Collections.Concurrent;

namespace TelegramGameBot.Services.Games
{
    public class WheelGameState
    {
        public int CurrentBet { get; set; }
        public bool IsSpinning { get; set; }
        public DateTime LastSpinTime { get; set; }
        public double WinMultiplier { get; set; }

        public WheelGameState(int bet)
        {
            CurrentBet = bet;
            IsSpinning = false;
            LastSpinTime = DateTime.Now;
            WinMultiplier = 0;
        }
    }

    public class WheelGame : BaseGame
    {
        private readonly Dictionary<string, (string name, string emoji, double multiplier)> _sectors = new()
        {
            { "diamond", ("–ë—Ä–∏–ª–ª–∏–∞–Ω—Ç", "üíé", 5.0) },
            { "target", ("–ú–∏—à–µ–Ω—å", "üéØ", 3.0) },
            { "dice", ("–ö—É–±–∏–∫", "üé≤", 2.0) },
            { "star", ("–ó–≤–µ–∑–¥–∞", "‚≠êÔ∏è", 1.5) },
            { "x", ("–ü—Ä–æ–∏–≥—Ä—ã—à", "‚ùå", 0.0) }
        };

        private readonly Dictionary<long, int> _pendingBets;

        public WheelGame(ITelegramBotClient bot, UserService userService)
            : base(bot, userService)
        {
            _pendingBets = new Dictionary<long, int>();
        }

        public override async Task ShowRules(long chatId)
        {
            var text = "üé° –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã\n\n" +
                      "–ü—Ä–∞–≤–∏–ª–∞:\n" +
                      "1. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É\n" +
                      "2. –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ\n" +
                      "3. –ü–æ–ª—É—á–∏—Ç–µ –≤—ã–∏–≥—Ä—ã—à –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è\n\n" +
                      "–ú–Ω–æ–∂–∏—Ç–µ–ª–∏:\n" +
                      "üíé –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç - x5.0\n" +
                      "üéØ –ú–∏—à–µ–Ω—å - x3.0\n" +
                      "üé≤ –ö—É–±–∏–∫ - x2.0\n" +
                      "‚≠êÔ∏è –ó–≤–µ–∑–¥–∞ - x1.5\n" +
                      "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à - x0.0";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üé° –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", "wheel_bet"),
                    InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "games_menu")
                }
            });

            await _bot.SendTextMessageAsync(chatId, text, replyMarkup: keyboard);
        }

        public override async Task HandleCommand(long chatId, long userId, string command)
        {
            switch (command)
            {
                case "wheel_bet":
                    await ShowBetMenu(chatId, "wheel_game");
                    break;

                case "wheel_spin":
                    await SpinWheel(chatId, userId);
                    break;
            }
        }

        public override async Task ProcessBet(long chatId, long userId, int amount)
        {
            var user = _userService.GetOrCreateUser(userId);
            
            if (user.Balance < amount)
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    $"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user.Balance} –º–æ–Ω–µ—Ç"
                );
                return;
            }

            _userService.UpdateBalance(userId, -amount);
            _pendingBets[userId] = amount;

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üé° –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ", "wheel_spin")
                }
            });

            await _bot.SendTextMessageAsync(
                chatId,
                $"–°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ!",
                replyMarkup: keyboard
            );
        }

        private async Task SpinWheel(long chatId, long userId)
        {
            if (!_pendingBets.TryGetValue(userId, out var bet))
            {
                await _bot.SendTextMessageAsync(
                    chatId,
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
                );
                return;
            }

            var sectors = _sectors.ToList();
            var result = sectors[_random.Next(sectors.Count)];
            var winAmount = (int)(bet * result.Value.multiplier);

            if (winAmount > 0)
            {
                _userService.UpdateBalance(userId, winAmount);
            }

            _pendingBets.Remove(userId);

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üé° –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "wheel_bet"),
                    InlineKeyboardButton.WithCallbackData("üè† –í –º–µ–Ω—é", "games_menu")
                }
            });

            var resultText = winAmount > 0
                ? $"üéâ –ü–æ–±–µ–¥–∞!\n" +
                  $"–í—ã–ø–∞–ª–æ: {result.Value.emoji} {result.Value.name}\n" +
                  $"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{result.Value.multiplier}\n" +
                  $"–í—ã–∏–≥—Ä—ã—à: {winAmount} –º–æ–Ω–µ—Ç"
                : $"üò¢ –ü—Ä–æ–∏–≥—Ä—ã—à\n" +
                  $"–í—ã–ø–∞–ª–æ: {result.Value.emoji} {result.Value.name}\n" +
                  $"–ü—Ä–æ–∏–≥—Ä—ã—à: {bet} –º–æ–Ω–µ—Ç";

            await _bot.SendTextMessageAsync(
                chatId,
                resultText,
                replyMarkup: keyboard
            );

            _userService.AddGameHistory(
                userId,
                "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã",
                bet,
                winAmount > 0,
                $"–í—ã–ø–∞–ª–æ: {result.Value.name}"
            );
        }
    }
} 